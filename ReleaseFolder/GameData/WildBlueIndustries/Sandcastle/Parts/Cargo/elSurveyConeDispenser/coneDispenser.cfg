PART:NEEDS[Launchpad]
{
	name = elSurveyConeDispenser
	module = Part
	author = Angel-125
	MODEL
	{
		model = WildBlueIndustries/Sandcastle/Parts/Cargo/sharedAssets/coneDispenser
	}	

	node_attach = 0, 0, 0.2, 0, 0, -1, 1

	rescaleFactor = 1
	TechRequired = advConstruction
	entryCost = 1000
	cost = 100
	category = Cargo
	subcategory = 0
	title = #LOC_SANDCASTLE_coneDispenserTitle // CD-10 Cone Dispenser
	manufacturer = #autoLOC_501663 // Dinkelstein Kerman's Construction Emporium
	description = #LOC_SANDCASTLE_coneDispenserDesc // This automated dispenser cand drop off and pick up Survey Cones without the need for a kerbal. To pick up a Survey Cone, simply maneuver the vehicle so that the Survey Cone is swept up by the sweepers until it hits the back rail.
	attachRules = 0,1,1,1,1
	mass = 0.05
	dragModelType = default
	maximum_drag = 0.1
	minimum_drag = 0.1
	angularDrag = 2
	crashTolerance = 12
	maxTemp = 900
	maxPressure = 90000
	tags = cargo EVA cck-Sandcastle
	
	MODULE
	{
		name = WBIPrinterRequirements
	}

	// Parts aren't allowed to have both ModuleInventoryPart and ModuleCargoPart in the same part.
	// If they do, then ModuleCargoPart will be removed. To get around the problem, Sandcastle
	// introduces ModuleStorablePart, which is a direct descendant of ModuleCargoPart. Because
	// the Part class specifically looks for "ModuleCargoPart" we essentially rename the part module
	// to sidestep the checks.
	MODULE
	{
		name = ModuleStorablePart
		packedVolume = 250
	}

	MODULE
	{
		name = ModuleInventoryPart
		InventorySlots = 1
		packedVolumeLimit = 200
		DEFAULTPARTS
		{
			name = elSurveyCone
		}
	}

	MODULE
	{
		// ModuleInventoryPart's DEFAULTPARTS doesn't support stacked parts.
		// This part module gets around the problem. Add this part module AFTER ModuleInventoryPart
		// and part stacks will be filled out to their max stack size in the editor.
		name = ModuleDefaultInventoryStack
	}

	MODULE
	{
		// Catches and stores cargo items into the part's inventory as long as they fit. Does not require a kerbal.
		// This only works on single-part vessels.
		// Note that you'll need a trigger collider set up in the part containing this part module
		// in order to trigger the catch and store operation.
		name = ModuleCargoCatcher

		// Restricts what parts may be caught and stored. You can have multiple catchPartName entries.
		// If no part is specified, then any part can be caught and stored.
		catchPartName = elSurveyCone

		// Optional name of the animation to play when preparing the catcher to catch cargo parts.
		deployAnimationName = Deploy
	}

	MODULE
	{
		// Dispenses cargo items from the part's inventory. Does not require a kerbal.
		name = ModuleCargoDispenser
		
		// Name of the transform where dropped cargo items will appear. Make sure you have enough space to drop the part!
		dropTransformName = dropTransform

		// Optional name of the animation to play when dropping an item.
		animationName = Deploy

		// Restricts what parts can be dropped. You can have multiple dropPartName entries.
		// If no part is specified, then any part can be dropped.
		dropPartName = elSurveyCone
	}
    //Allows the animation to be previewed in the aditor
    MODULE
	{
		name = ModuleAnimateGeneric
		animationName = Deploy
        eventAvailableEditor = true
        eventAvailableEVA = false
        eventAvailableFlight = false
        instantAnimInEditor = false
        showStatus = false
        useMultipleDragCubes = false
        startEventGUIName = Deploy
        endEventGUIName = Retract
        actionGUIName = Toggle deploy
	}
}
